name: Validate ARG Queries (hardened + integrity)

on:
  pull_request_target:
    branches:
      - main
      - dev-tools
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
    paths:
      - '**/*.kql'
  workflow_dispatch: {}

permissions:
  contents: read  # required for actions/checkout and git show

jobs:
  kql_file_check:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # required for requesting the JWT (azure/login) — kept at job level so azure/login works when run
    steps:
      - name: Harden Runner (audit mode)
        uses: step-security/harden-runner@6c439dc8bdf85cadbbce9ed30d1c7b959517bc49 # v2.12.2
        with:
          egress-policy: audit

      - name: Checkout repository (trusted base/main)
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: main
          fetch-depth: 0

      - name: Integrity check: compare validator scripts to origin/main
        id: integrity
        shell: bash
        env:
          PR_NUMBER: ${{ github.event.number }}
          FILES: ".github/scripts/validate-kql-comments.ps1 .github/scripts/validate-kql-syntax.ps1"
        run: |
          set -euo pipefail
          echo "Running integrity checks for: $FILES"
          git fetch --no-tags origin main || true

          failed=0

          for FILE in $FILES; do
            echo "----"
            echo "Checking file: $FILE"

            if ! git show "origin/main:${FILE}" >/dev/null 2>&1; then
              echo "Error: ${FILE} not found on origin/main"
              failed=1
              continue
            fi
            base_hash=$(git show "origin/main:${FILE}" | sha256sum | cut -d ' ' -f1)
            echo "Base hash (origin/main): $base_hash"

            if [ -n "${PR_NUMBER:-}" ]; then
              echo "Detected PR run for PR #${PR_NUMBER}. Fetching PR head and merge refs..."
              git fetch origin "refs/pull/${PR_NUMBER}/merge:refs/remotes/origin/pr-merge/${PR_NUMBER}" || true
              git fetch origin "refs/pull/${PR_NUMBER}/head:refs/remotes/origin/pr-head/${PR_NUMBER}" || true

              if git show "refs/remotes/origin/pr-merge/${PR_NUMBER}:${FILE}" >/dev/null 2>&1; then
                pr_hash=$(git show "refs/remotes/origin/pr-merge/${PR_NUMBER}:${FILE}" | sha256sum | cut -d ' ' -f1)
                echo "PR merge hash (PR #${PR_NUMBER}): $pr_hash"
              elif git show "refs/remotes/origin/pr-head/${PR_NUMBER}:${FILE}" >/dev/null 2>&1; then
                pr_hash=$(git show "refs/remotes/origin/pr-head/${PR_NUMBER}:${FILE}" | sha256sum | cut -d ' ' -f1)
                echo "PR head hash (PR #${PR_NUMBER}): $pr_hash"
              else
                echo "Error: $FILE not found in PR #${PR_NUMBER} (merge or head refs)"
                failed=1
                continue
              fi
            else
              echo "No PR context available (unexpected for pull_request_target)."
              failed=1
              continue
            fi

            if [ "$base_hash" != "$pr_hash" ]; then
              echo "Integrity check failed for $FILE! File on PR does not match trusted version on main."
              echo "Base (main): $base_hash"
              echo "PR:          $pr_hash"
              failed=1
              continue
            fi

            echo "Integrity check passed for $FILE."
          done

          if [ "$failed" -ne 0 ]; then
            echo "One or more integrity checks failed."
            exit 1
          fi

          echo "All integrity checks passed."

      - name: Prepare PR merge tree as data (no checkout of PR code)
        id: prepare_pr_data
        shell: bash
        env:
          PR_NUMBER: ${{ github.event.number }}
        run: |
          set -euo pipefail
          PR_DIR="pr-merge-${PR_NUMBER}"
          mkdir -p "$PR_DIR"

          # Prefer the merge ref; fall back to head ref
          if git rev-parse --verify --quiet "refs/remotes/origin/pr-merge/${PR_NUMBER}" >/dev/null; then
            REF="refs/remotes/origin/pr-merge/${PR_NUMBER}"
          elif git rev-parse --verify --quiet "refs/remotes/origin/pr-head/${PR_NUMBER}" >/dev/null; then
            REF="refs/remotes/origin/pr-head/${PR_NUMBER}"
          else
            # attempt to fetch if refs not present
            git fetch origin "refs/pull/${PR_NUMBER}/merge:refs/remotes/origin/pr-merge/${PR_NUMBER}" || true
            git fetch origin "refs/pull/${PR_NUMBER}/head:refs/remotes/origin/pr-head/${PR_NUMBER}" || true
            if git rev-parse --verify --quiet "refs/remotes/origin/pr-merge/${PR_NUMBER}" >/dev/null; then
              REF="refs/remotes/origin/pr-merge/${PR_NUMBER}"
            else
              REF="refs/remotes/origin/pr-head/${PR_NUMBER}"
            fi
          fi

          echo "Extracting PR ${PR_NUMBER} tree from $REF into $PR_DIR (treat PR as data)"
          # Use git archive to export PR tree into a directory (no checkout of PR code into main workspace)
          git -c core.autocrlf=false archive --format=tar "$REF" | tar -x -C "$PR_DIR"
          echo "PR tree extracted to $PR_DIR"
          echo "PR_MERGE_DIR=$PR_DIR" >> "$GITHUB_OUTPUT"

      - name: Check PR approval status
        id: check_approval
        uses: actions/github-script@v6
        with:
          script: |
            const pull_number = context.payload.number;
            if (!pull_number) {
              core.setFailed('No pull request number in context.');
            }
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number
            });
            const decision = pr.data.review_decision || '';
            return decision.toLowerCase() === 'approved' ? 'true' : 'false'

      - name: Azure login (OIDC) — gated by integrity, approval, and not a fork
        if: ${{ steps.integrity.outcome == 'success' && steps.check_approval.outputs.result == 'true' && github.event.pull_request.head.repo.fork == false }}
        environment: Azure
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2.3.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Run KQL Comment Check (trusted script from main; PR treated as data)
        if: ${{ steps.integrity.outcome == 'success' }}
        env:
          PR_MERGE_DIR: ${{ steps.prepare_pr_data.outputs.PR_MERGE_DIR }}
        run: |
          # Trusted validator from main runs and reads PR files from $PR_MERGE_DIR
          echo "Running trusted comment validator (script from main). PR data at: $PR_MERGE_DIR"
          pwsh .github/scripts/validate-kql-comments.ps1 -PrPath "$PR_MERGE_DIR" || exit $?

      - name: Run KQL Syntax Check (trusted script from main; PR treated as data)
        if: ${{ steps.integrity.outcome == 'success' }}
        env:
          PR_MERGE_DIR: ${{ steps.prepare_pr_data.outputs.PR_MERGE_DIR }}
        run: |
          echo "Running trusted syntax validator (script from main). PR data at: $PR_MERGE_DIR"
          pwsh .github/scripts/validate-kql-syntax.ps1 -PrPath "$PR_MERGE_DIR" || exit $?